import random
import numpy as np
import random

input_neurons = 48
hidden_neurons = 20
output_neurons = 36
learning_rate = 0.9

#  Conjunto de treinamento
training = [
    ('111111100001100011100101101001110001100001111111','000000000000000000000000000000000001'), # 0
    ('001100011100110100100100000100000100000100111111','000000000000000000000000000000000010'), # 1
    ('111111000001000001000001111111100000100000111111','000000000000000000000000000000000100'), # 2
    ('111111100001000001000001011111000001100001111111','000000000000000000000000000000001000'), # 3
    ('100001100001100001100001111111000001000001000001','000000000000000000000000000000010000'), # 4
    ('111111100000100000100000111111000001100001111111','000000000000000000000000000000100000'), # 5
    ('111111100001100000100000111111100001100001111111','000000000000000000000000000001000000'), # 6
    ('111111100001100001000001000001000001000001000001','000000000000000000000000000010000000'), # 7
    ('111111100001100001100001111111100001100001111111','000000000000000000000000000100000000'), # 8
    ('111111100001100001111111000001000001000001111111','000000000000000000000000001000000000'), # 9
    ('011110110011100001100001111111100001100001100001','000000000000000000000000010000000000'), # A
    ('111110100011100001100001111110100001100011111110','000000000000000000000000100000000000'), # B
    ('111111100001100000100000100000100000100001111111','000000000000000000000001000000000000'), # C
    ('111110100011100001100001100001100001100011111110','000000000000000000000010000000000000'), # D
    ('111111100000100000100000111110100000100000111111','000000000000000000000100000000000000'), # E
    ('111111100000100000100000111110100000100000100000','000000000000000000001000000000000000'), # F
    ('111111100000100000100000100111100001100001111111','000000000000000000010000000000000000'), # G
    ('100001100001100001100001111111100001100001100001','000000000000000000100000000000000000'), # H
    ('111111001100001100001100001100001100001100111111','000000000000000001000000000000000000'), # I
    ('000001000001000001000001000001100001100001111111','000000000000000010000000000000000000'), # J
    ('100011100110101100111000111000101100100110100011','000000000000000100000000000000000000'), # K
    ('100000100000100000100000100000100000100000111111','000000000000001000000000000000000000'), # L
    ('110011111111101101101101100001100001100001100001','000000000000010000000000000000000000'), # M
    ('110001111001101001101101100101100101100111100011','000000000000100000000000000000000000'), # N
    ('111111100001100001100001100001100001100001111111','000000000001000000000000000000000000'), # O
    ('111111100001100001100001111111100000100000100000','000000000010000000000000000000000000'), # P
    ('011110110011100001101101100101110111011110000011','000000000100000000000000000000000000'), # Q
    ('111111100001100001111111101100100110100011100001','000000001000000000000000000000000000'), # R
    ('111111100000100000100000111111000001000001111111','000000010000000000000000000000000000'), # S
    ('111111001100001100001100001100001100001100001100','000000100000000000000000000000000000'), # T
    ('100001100001100001100001100001100001100001111111','000001000000000000000000000000000000'), # U
    ('100001100001110011110011010010011110001100001100','000010000000000000000000000000000000'), # V
    ('100001100001100001100001101101101101101101110011','000100000000000000000000000000000000'), # W
    ('100001110011011110001100001100011110110011100001','001000000000000000000000000000000000'), # X
    ('100001100001110011011110001100001100001100001100','010000000000000000000000000000000000'), # Y
    ('111111000011000110001100001100011000110000111111','100000000000000000000000000000000000'), # Z
]

def get_test_data():
    test_data = random.sample(training, 34)
    # 20 caracteres com ruido mínimo
    for _ in range(20):
        random_tuple = random.choice(training)
        character    = random_tuple[0]
        answer       = random_tuple[1]
        for _ in range(2):
            random_index = random.randrange(len(character))
            char_list    = list(character)
            char_list[random_index] = random.choice(['0','1'])
            character    = "".join(char_list)
        test_data.append((character,answer))
    # 20 caracteres com ruido médio
    for _ in range(20):
        random_tuple = random.choice(training)
        character    = random_tuple[0]
        answer       = random_tuple[1]
        for _ in range(6):
            random_index = random.randrange(len(character))
            char_list    = list(character)
            char_list[random_index] = random.choice(['0','1'])
            character    = "".join(char_list)
        test_data.append((character,answer))
    # 20 caracteres com ruido avançado
    for _ in range(20):
        random_tuple = random.choice(training)
        character    = random_tuple[0]
        answer       = random_tuple[1]
        for _ in range(12):
            random_index = random.randrange(len(character))
            char_list    = list(character)
            char_list[random_index] = random.choice(['0','1'])
            character    = "".join(char_list)
        test_data.append((character,answer))

    # Caracteres que não fazem parte do treinamento
    test_data.append(('000000000000000000000000000000000000000000000000','000000000000000000000000000000000001'))
    test_data.append(('111111111111111111111111111111111111111111111111','000000000000000000000000000000000001'))
    test_data.append(('011111010001010001000011000110001100000000001100','000000000000000000000000000000000001'))
    test_data.append(('001100001100001100001100001100000000001100001100','000000000000000000000000000000000001'))
    test_data.append(('110001110010000010000100001000001011010011100000','000000000000000000000000000000000001'))
    test_data.append(('001100001100001100111111111111001100001100001100','000000000000000000000000000000000001'),)

    float_tuple = reshape_array_to_float_tuple(test_data)
    return float_tuple

def get_training_data():
    float_tuple = reshape_array_to_float_tuple(training)
    return float_tuple

def reshape_array_to_float_tuple(array):
    training_inputs = []
    for linha in array:
        entrada = []
        saida = []

        for e in linha[0]:
            entrada.append(e)
        for s in linha[1]:
            saida.append(s)

        entrada_array = np.array(entrada, dtype=np.float32)
        saida_array = np.array(saida, dtype=np.float32)

        training_inputs.append((np.reshape(entrada_array, (input_neurons, 1)), np.reshape(saida_array, (output_neurons, 1))))
    return training_inputs
